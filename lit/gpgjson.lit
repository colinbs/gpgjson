@code_type python .py
@comment_type # %s
@title GPG-to-JSON

@s Overview

This is a small script that parses the output of the `gpg --list-keys` command and
converts it to JSON. The JSON is then printed to the console.

It is also possible to pass one or more *fingerprints* of GPG keys to the script. In this case the
script will parse the output of the `gpg --list-key <fingerprint>` command, which prints
only the key(s) with the matching fingerprint(s).

By passing the `-o <filename>` or `--outfile <filename>` option, the output is written to
a file named `<filename>`.

@s JSON Structure

The JSON could look as follows:

--- JSON Example
[
    {
        "pub0": {
            "alg": "rsa4096",
            "cdate": "2016-12-24",
            "flags": "SC",
            "exdate": "2018-03-29",
            "uid0": {
                "trust": "expired",
                "name": "Alice",
                "email": "<alice@example.com>"
            }
        },
        "sub0": {},
        "fprint": "ABCDEF0123456789ABCDEF01234567890123456789"
    },
    {
        "pub1": {
            "alg": "rsa4096",
            "cdate": "2017-01-01",
            "flags": "SC",
            "exdate": "2018-01-01",
            "uid0": {
                "trust": "ultimate",
                "name": "Bob",
                "email": "<bob@example.com>"
            }
        },
        "sub1": {
            "alg": "rsa2048",
            "cdate": "2018-03-26",
            "flags": "E",
            "exdate": "2019-03-26"
        },
        "fprint": "01234567890123456789ABCDEFABCDEF012345CDEF"
    }
]
---

@s Requirements
TODO

@s Script

--- gpgjson.py
@{Imports}
@{Variables}
@{Args Parsing}
@{Execute Command}
@{Split Output}
@{Write File}
---

First, the script imports the following libraries:
* `subprocess` for running the GPG commands
* `sys` for exiting the script early due to errors
* `re` for parsing the output of the GPG commands
* `json` for converting the parsed data to JSON
* `argparse` for parsing the arguments passed to the script

--- Imports
import subprocess
import sys
import re
import json
import argparse
---

@s Variables

Next, these are the used variables. `raw_output` is the string output of the appropriate
GPG command.

--- Variables
raw_output = ""
---

The `all_keys` list will contain all parsed keys. `current_key` is the currently processed
key. By default it receives two dictionaries.

--- Variables +=
all_keys = list()

current_key = dict()
current_key["pub0"] = dict()
current_key["sub0"] = dict()
---

The rest of the variables are control variables that are used during the parsing process.

--- Variables +=
next_is_fprint = False
curr_state = "pub"
index = 0
state_index = 0
---

@s Argument Parsing

After the initialization, the main script begins. First, process the arguments that were
passed to the function.

--- Args Parsing
parser = argparse.ArgumentParser()

parser.add_argument("keys", nargs='*',
                    help="The fingerprints of one or more keys.")
parser.add_argument("-a", "--all-keys", help="Print all GPG keys.",
                    action='store_true')
parser.add_argument("-i", "--indent", help="Indention of the JSON output.",
                    type=int, default=4)
parser.add_argument("-o", "--outfile", nargs=1, type=str,
                    help="The output file where the JSON should be written to.")

args = parser.parse_args()

---

Then, dependent on the passed parameters, the command is executed and the string output is stored.

--- Execute Command
if args.all_keys:
    process = subprocess.run(args=["gpg", "--list-keys"], capture_output=True)
    if process.returncode > 0:
        print("No fingerprints found!")
        sys.exit()
    raw_output = str(process.stdout.decode("utf-8"))
elif args.keys:
    process = subprocess.run(args=["gpg", "--list-key"] + args.keys, capture_output=True)
    if process.returncode > 0:
        print("No fingerprint matched a key!")
        sys.exit()
    raw_output = str(process.stdout.decode("utf-8"))
else:
    parser.print_help()
    sys.exit()
---

Since the output is still a single string, it is split at new lines. Each line can now be
processed more conveniently. 

--- Split Output
raw_output_lines = raw_output.split('\n')

for line in raw_output_lines:
    @{Main Loop}
---

@s The Main Loop

In the main loop, each line is parsed one after another.

--- Main Loop
@{Prepare Line}
@{Store Key}
@{Header Lines}
---

First, the line is cleaned up. Special characters and spaces are removed.

--- Prepare Line
line = list(filter(None, line.split(' ')))
line = list(map(lambda l: re.sub(r"[\[\]]", "", l), line))
line = list(filter(lambda l: l, line))
---

There are some special header lines that are ignored.

--- Header Lines
if '/' in line[0] or '-' in line[0]:
    continue
else:
    @{Parse Pub}
    @{Parse Uid}
    @{Parse Sub}
    @{Parse Fingerprint}
---

At the start of each line there is an indicator that tells, which values will follow. The
*pub* string indicates that there will follow general information about the key. These
are:
* `algorithm`
* `creation date`
* `flags`
* `expiration date`

After this line the fingerprint follows, so `next_is_fprint` is set to `True`.

--- Parse Pub
if line[0] == "pub":
    curr_state = "pub" + str(state_index)
    current_key[curr_state]["alg"] = line[1]
    current_key[curr_state]["cdate"] = line[2]
    current_key[curr_state]["flags"] = line[3]
    current_key[curr_state]["exdate"] = line[5]
    next_is_fprint = True
    index = 0
---

The same parsing will occur if the line begins with `sub`.

--- Parse Sub
elif line[0] == "sub":
    curr_state = "sub" + str(state_index)
    current_key[curr_state]["alg"] = line[1]
    current_key[curr_state]["cdate"] = line[2]
    current_key[curr_state]["flags"] = line[3]
    current_key[curr_state]["exdate"] = line[5]
    index = 0
---

After a `pub` or `sub` line follows one or more `uid` lines. These lines contain
information more information about the owner of the key:
* `trust`
* `name`
* `email`

--- Parse Uid
elif line[0] == "uid":
    current_key[curr_state]["uid" + str(index)] = dict()
    current_key[curr_state]["uid" + str(index)]["trust"] = line[1]
    current_key[curr_state]["uid" + str(index)]["name"] = ' '.join(line[2:-1])
    current_key[curr_state]["uid" + str(index)]["email"] = line[-1]
    index += 1
---

As mentioned before, after the `pub` line comes the line that contains the fingerprint.

--- Parse Fingerprint
elif next_is_fprint:
    current_key["fprint"] = line[0]
    next_is_fprint = False
---

If the length of the line is 0 (a blank line), the key is finished and a new one starts.
Store the `current_key` in `all_keys` and reset the control variables.

--- Store Key
if len(line) == 0:
    if current_key["pub" + str(state_index)]:
        state_index += 1
        all_keys.append(current_key)
        next_is_fprint = False
        current_key = dict()
        current_key["pub" + str(state_index)] = dict()
        current_key["sub" + str(state_index)] = dict()
    continue
---

After all lines are processed, the filename is determined according to the input:

--- Write File
if args.outfile:
    with open(''.join(args.outfile), 'w') as outfile:
        json.dump(all_keys, outfile, indent=args.indent)
else:
    print(json.dumps(all_keys, indent=args.indent))
---
